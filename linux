#!/bin/sh

# Welcome to the Agendrix laptop script for Linux (Ubuntu), based on thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

show_help() {
  echo "Setup your development machine"
  echo "options:"
  echo "--help                              Show brief help."
  echo "--skip-homebrew-update              Skip Homebrew formulaes and casks update."
  echo "--skip-zshrc-setup                    Skip configuring .zshrc and .zshrc.local."
  echo "--ruby-version                      Configure a specific ruby version."
  exit 0;
}

while test $# -gt 0; do
  case "$1" in
    (-h|--help)
        show_help;;
    (--skip-homebrew-update)
        SKIP_HOMEBREW_UPDATE="true"
        shift;;
    (--skip-zshrc-setup)
        SKIP_ZSHRC_SETUP="true"
        shift;;
    (--ruby-version)
        RUBY_VERSION="$2"
        shift
        shift;;
    *)
      show_help;;
  esac
done

#
# Functions
#

fancy_echo() {
  # shellcheck disable=SC3043
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

update_shell() {
  # shellcheck disable=SC3043
  local shell_path;
  shell_path="$(which zsh)"
  if [ "$shell_path" != "$SHELL" ]; then
    fancy_echo "Changing your shell to zsh ..."
    if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
      fancy_echo "Adding '$shell_path' to /etc/shells"
      sudo sh -c "echo $shell_path >> /etc/shells"
    fi
    sudo chsh -s "$shell_path" "$USER"
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

brew_package_exists() {
  brew list "${1}" > /dev/null;
}

activate_exit_on_error() {
  set -e
}

deactivate_exit_on_error() {
  set +e
}

install_essential_packages() {
  fancy_echo "Installing essential packages for Homebrew installation..."
  sudo apt-get update
  sudo apt-get install -y build-essential curl file git
}

install_zsh() {
  fancy_echo "Installing zsh..."
  sudo apt-get install -y zsh
}

install_homebrew() {
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Add Homebrew to PATH for Linux
  # shellcheck disable=SC3043
  local homebrew_path
  homebrew_path="/home/linuxbrew/.linuxbrew"
  
  if [ -d "$homebrew_path" ]; then
    # Add homebrew to path for this session
    eval "$("$homebrew_path/bin/brew" shellenv)"
    
    # Ensure Homebrew is in .profile for future sessions
    if ! grep -q "eval \"\$(${homebrew_path}/bin/brew shellenv)\"" "$HOME/.profile"; then
      fancy_echo "Adding Homebrew to PATH..."
      echo "eval \"\$(${homebrew_path}/bin/brew shellenv)\"" >> "$HOME/.profile"
    fi
  fi
}

set_homebrew_owner() {
  fancy_echo "Setting Homebrew dependencies owner ..."
  HOMEBREW_PREFIX=$(brew --prefix)
  
  # For Linux we don't need to use sudo chflags as in macOS
  if [ -d "$HOMEBREW_PREFIX" ]; then
    sudo chmod -R go-w "$HOMEBREW_PREFIX"
  fi
}

install_rust() {
  fancy_echo "Installing rust..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
}

#
# Main
#

activate_exit_on_error

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

install_essential_packages
install_zsh

if [ ! -d "$HOME/.oh-my-zsh" ]; then
  fancy_echo "Installing Oh My Zsh ..."
  git clone https://github.com/robbyrussell/oh-my-zsh.git "$HOME/.oh-my-zsh"
fi

update_shell

install_rust

if ! command -v brew >/dev/null; then
  install_homebrew
fi

set_homebrew_owner

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

if [ ! "$SKIP_HOMEBREW_UPDATE" ]; then
  fancy_echo "Updating Homebrew formulae ..."
  brew update --quiet --force # https://github.com/Homebrew/brew/issues/1151

  deactivate_exit_on_error

  brew bundle --quiet --file=- <<EOF
    tap "homebrew/services"
    tap "puma/puma"
    tap "hashicorp/tap"
    tap "bbc/audiowaveform"

    # Unix
    brew "git"
    brew "openssl@3.4"
    brew "the_silver_searcher"
    brew "ripgrep"
    brew "vim"
    brew "jq"
    brew "bind"
    brew "gdal"
    brew "cmake"
    brew "pkg-config"
    brew "coreutils"

    # Image manipulation
    brew "imagemagick"
    brew "optipng"
    brew "jpegoptim"
    brew "pngquant"

    # Audio Manipulation
    brew "ffmpeg"
    brew "audiowaveform"

    # Programming languages and package managers
    brew "libyaml" # should come after openssl
    brew "node@22", link: true
    brew "rbenv"
    brew "ruby-build"
    brew "yarn"
    brew "puma-dev"
    brew "git-crypt"
    brew "gnupg"

    # VSCode Sorbet extension dependency
    brew "watchman"

    # Databases
    brew "postgresql@16", restart_service: true, link: true
    brew "redis", restart_service: true

    # AWS
    brew  "awscli"

    # Github
    brew "gh"

    # Terraform
    brew "hashicorp/tap/terraform"

    # Websockets
    brew "anycable-go"
EOF
  activate_exit_on_error
fi

if brew_package_exists "puma-dev"; then
  fancy_echo "Configuring puma-dev..."
  sudo puma-dev -setup
  SUDO_USER="" puma-dev -install -d localhost
fi

if brew_package_exists "postgresql@16"; then
  fancy_echo "Configuring Postgresql..."
  brew unlink postgresql@16
  brew link --force postgresql@16
fi

if brew_package_exists "node@22"; then
  fancy_echo "Configuring Node..."
  brew unlink node@22
  brew link --overwrite node@22
fi

ruby_version="${RUBY_VERSION:-3.3.6}"
if ! rbenv versions | grep --silent "$ruby_version"; then
  fancy_echo "Configuring Ruby..."
  eval "$(rbenv init -)"

  if ! rbenv versions | grep -Fq "$ruby_version"; then
    OPEN_SSL_PREFIX=$(brew --prefix openssl@3.4)

    PATH="$OPEN_SSL_PREFIX/bin:$PATH" \
    LDFLAGS="-L$OPEN_SSL_PREFIX/lib" \
    CPPFLAGS="-I$OPEN_SSL_PREFIX/include" \
    PKG_CONFIG_PATH="$OPEN_SSL_PREFIX/lib/pkgconfig" \
    RUBY_CFLAGS="-Wno-error=implicit-function-declaration" \
    RUBY_CONFIGURE_OPTS="--with-openssl-dir=$OPEN_SSL_PREFIX --enable-yjit" \
    rbenv install -s "$ruby_version"
  fi

  rbenv global "$ruby_version"
  rbenv shell "$ruby_version"

  gem_install_or_update 'bundler'
  number_of_cores=$(nproc)
  bundle config --global jobs $((number_of_cores - 1))

  deactivate_exit_on_error

  if ! timeout 240 gem update --system; then
    fancy_echo "The optionnal command 'gem update --system' has timeout."
  fi

  activate_exit_on_error
fi

if [ ! "$SKIP_ZSHRC_SETUP" ]; then
  _files_backed_up=false

  fancy_echo "Configuring .zshrc and .zshrc.local ..."

  if [ -f "$HOME/.zshrc" ] || [ -f "$HOME/.zshrc.local" ]; then
    fancy_echo "Backing up your current .zshrc and .zshrc.local ..."
    [ -f "$HOME/.zshrc" ] && mv "$HOME/.zshrc" "$HOME/.zshrc.old"
    [ -f "$HOME/.zshrc.local" ] && mv "$HOME/.zshrc.local" "$HOME/.zshrc.local.old"
    _files_backed_up=true
  fi

  curl -o "$HOME/.zshrc" https://raw.githubusercontent.com/agendrix/laptop/master/.zshrc
  curl -o "$HOME/.zshrc.local" https://raw.githubusercontent.com/agendrix/laptop/master/.zshrc.local

  if [ "$_files_backed_up" = true ]; then
    fancy_echo "Your old files have been backed up to ${HOME}/.zshrc.old and ${HOME}/.zshrc.local.old. Review them and add any needed changes to the new standardized files."
  fi
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi

fancy_echo "Script completed. You might need to restart your computer."