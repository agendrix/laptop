#!/bin/sh

# Welcome to the Agendrix laptop script, based on thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

show_help() {
  echo "Setup your development machine"
  echo "options:"
  echo "--help                              Show brief help."
  echo "--skip-homebrew-update              Skip Homebrew formulaes and casks update."
  echo "--ruby-version                      Configure a specific ruby version."
  exit 0;
}

while test $# -gt 0; do
  case "$1" in
    (-h|--help)
        show_help;;
    (--skip-homebrew-update)
        SKIP_HOMEBREW_UPDATE="true"
        shift;;
    (--ruby-version)
        RUBY_VERSION="$2"
        shift
        shift;;
    *)
      show_help;;
  esac
done

#
# Functions
#

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

zshrc_path() {
  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi
  echo $zshrc
}

safe_append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"
  zshrc=$(zshrc_path)

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"
  if [ $shell_path != $SHELL ]; then
    fancy_echo "Changing your shell to zsh ..."
    if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
      fancy_echo "Adding '$shell_path' to /etc/shells"
      sudo sh -c "echo $shell_path >> /etc/shells"
    fi
    sudo chsh -s "$shell_path" "$USER"
  fi
}

install_rosetta_if_required() {
  # Check if running a new Apple silicon/arm64 chip, which requires rosetta for Intel software 
  local OS ARCH
  OS="$(uname)"
  ARCH="$(uname -m)"
  if [ "${OS}" = "Darwin" ] && [ "${ARCH}" = "arm64" ]; then
    # Use arch binary to check if x86_64 code can run, if so, skip installation of Rosetta
    if ! arch -x86_64 /usr/bin/true 2> /dev/null; then
      fancy_echo "Installing rosetta..."
      echo "A" | softwareupdate --install-rosetta
    fi
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

brew_package_exists() {
  brew list "${1}" > /dev/null;
}

activate_exit_on_error() {
  set -e
}

deactivate_exit_on_error() {
  set +e
}

install_homebrew() {
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  HOMEBREW_PREFIX=""
  if ! type "brew" > /dev/null; then
    if [ -d "/opt/homebrew" ]; then
      # Check for macOS ARM
      HOMEBREW_PREFIX="/opt/homebrew"
    elif [ -d "/usr/local/homebrew" ]; then
      # Check for macOS Intel
      HOMEBREW_PREFIX="/usr/local/Homebrew"
    elif [ -d "/home/linuxbrew/.linuxbrew" ]; then
      # Check for Linux
      HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
    fi
  else
    HOMEBREW_PREFIX=$(brew --prefix)
  fi
  safe_append_to_zshrc '# Set PATH, MANPATH, etc., for Homebrew.'
  safe_append_to_zshrc 'eval "$(/opt/homebrew/bin/brew shellenv)"'
  eval "$(/opt/homebrew/bin/brew shellenv)"
  
  safe_append_to_zshrc '# recommended by brew doctor'
  safe_append_to_zshrc 'export PATH="$HOMEBREW_PREFIX/bin:$PATH"' 1
  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
  source $HOME/zshrc_path
}

set_homebrew_owner() {
  fancy_echo "Seting Homebrew dependencies owner ..."
  HOMEBREW_PREFIX=$(brew --prefix)

  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"

  # /usr/local/opt was the pre-m1 homebrew opt directory
  #  some libs depend on it existing
  OPT_SYM_LINK=/usr/local/opt
  if ! [ -d $OPT_SYM_LINK ]; then
    sudo ln -s "$HOMEBREW_PREFIX/opt" $OPT_SYM_LINK
    sudo chown -R "$LOGNAME:admin" $OPT_SYM_LINK
  fi
}

#
# Main
#

activate_exit_on_error

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

safe_append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

update_shell

install_rosetta_if_required

if ! command -v brew >/dev/null; then
  install_homebrew
fi

set_homebrew_owner

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

if [ ! $SKIP_HOMEBREW_UPDATE ]; then
  fancy_echo "Updating Homebrew formulae ..."
  brew update --quiet --force # https://github.com/Homebrew/brew/issues/1151

  deactivate_exit_on_error

  brew bundle --quiet --file=- <<EOF
    tap "homebrew/services"
    tap "puma/puma"
    tap "hashicorp/tap"

    # Unix
    brew "git"
    brew "openssl@1.1"
    brew "the_silver_searcher"
    brew "vim"
    brew "jq"
    brew "bind"
    brew "gdal"
    brew "cmake"
    brew "pkg-config"

    # Image manipulation
    brew "imagemagick"
    brew "optipng"
    brew "jpegoptim"
    brew "pngquant"

    # Programming languages and package managers
    brew "libyaml" # should come after openssl
    brew "node@18"
    brew "rbenv"
    brew "ruby-build"
    brew "yarn"
    brew "puma-dev"
    brew "git-crypt"
    brew "gnupg"

    # VSCode Sorbet extension dependency
    brew "watchman"

    # Databases
    brew "postgresql@13", restart_service: :changed
    brew "redis", restart_service: :changed

    # AWS
    brew  "awscli"

    # Github
    brew "gh"  

    # Terraform
    brew "hashicorp/tap/terraform"

    # Websockets
    brew "anycable-go"
EOF
  activate_exit_on_error
fi

if brew_package_exists "puma-dev"; then
  fancy_echo "Configuring puma-dev..."
  sudo puma-dev -setup
  puma-dev -install -d localhost
fi

if brew_package_exists "postgresql@13"; then
  fancy_echo "Configuring Postgresql..."
  brew unlink postgresql@13
  brew link --force postgresql@13
fi

if brew_package_exists "node@18"; then
  fancy_echo "Configuring Node..."
  brew unlink node@18
  brew link --overwrite node@18
fi

ruby_version="${RUBY_VERSION:-2.7.4}"
if ! rbenv versions | grep --silent $ruby_version; then
  fancy_echo "Configuring Ruby..."
  safe_append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
  eval "$(rbenv init -)"

  if ! rbenv versions | grep -Fq "$ruby_version"; then
    OPEN_SSL_PREFIX=$(brew --prefix openssl@1.1)

    PATH="$OPEN_SSL_PREFIX/bin:$PATH" \
    LDFLAGS="-L$OPEN_SSL_PREFIX/lib" \
    CPPFLAGS="-I$OPEN_SSL_PREFIX/include" \
    PKG_CONFIG_PATH="$OPEN_SSL_PREFIX/lib/pkgconfig" \
    RUBY_CFLAGS="-Wno-error=implicit-function-declaration" \
    RUBY_CONFIGURE_OPTS=--with-openssl-dir=$OPEN_SSL_PREFIX \
    rbenv install -s "$ruby_version"
  fi

  rbenv global "$ruby_version"
  rbenv shell "$ruby_version"

  gem_install_or_update 'bundler'
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

  deactivate_exit_on_error

  if ! timeout 240 gem update --system; then
    fancy_echo "The optionnal command 'gem update --system' has timeout."
  fi

  activate_exit_on_error
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  . "$HOME/.laptop.local"
fi

fancy_echo "Script completed. You might need to restart your computer."
